<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Gallery;
use App\Models\Brand;
use App\Models\FAQ;
use App\Models\Statistic;
use App\Models\Testimonial;
use App\Models\Service;
use App\Models\Feature;
use App\Models\Partner;
use App\Models\Schedule;
use App\Models\Timeline;

class ContentSectionsSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->command->info('üöÄ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u cho Content Sections...');

        $this->createGalleries();
        $this->createBrands();
        $this->createFAQs();
        $this->createStatistics();
        $this->createTestimonials();
        $this->createServices();
        $this->createFeatures();
        $this->createPartners();
        $this->createSchedules();
        $this->createTimelines();

        $this->command->info('üéâ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u Content Sections!');
    }

    /**
     * T·∫°o galleries m·∫´u
     */
    private function createGalleries()
    {
        $galleries = [
            [
                'name' => 'S·ª± ki·ªán c√¥ng ty 2024',
                'slug' => 'su-kien-cong-ty-2024',
                'images' => [
                    'galleries/event-1.jpg',
                    'galleries/event-2.jpg',
                    'galleries/event-3.jpg',
                    'galleries/event-4.jpg'
                ],
                'description' => 'B·ªô s∆∞u t·∫≠p ·∫£nh t·ª´ c√°c s·ª± ki·ªán quan tr·ªçng c·ªßa c√¥ng ty trong nƒÉm 2024',
                'status' => 'active',
                'order' => 1
            ],
            [
                'name' => 'VƒÉn ph√≤ng l√†m vi·ªác',
                'slug' => 'van-phong-lam-viec',
                'images' => [
                    'galleries/office-1.jpg',
                    'galleries/office-2.jpg',
                    'galleries/office-3.jpg'
                ],
                'description' => 'Kh√¥ng gian l√†m vi·ªác hi·ªán ƒë·∫°i v√† chuy√™n nghi·ªáp',
                'status' => 'active',
                'order' => 2
            ]
        ];

        foreach ($galleries as $galleryData) {
            Gallery::firstOrCreate(
                ['slug' => $galleryData['slug']],
                $galleryData
            );
        }

        $this->command->info('‚úÖ ƒê√£ t·∫°o ' . count($galleries) . ' galleries');
    }

    /**
     * T·∫°o brands m·∫´u
     */
    private function createBrands()
    {
        $brands = [
            [
                'name' => 'Microsoft',
                'slug' => 'microsoft',
                'logo' => 'brands/microsoft-logo.png',
                'website_url' => 'https://microsoft.com',
                'description' => 'C√¥ng ty c√¥ng ngh·ªá h√†ng ƒë·∫ßu th·∫ø gi·ªõi',
                'status' => 'active',
                'order' => 1
            ],
            [
                'name' => 'Google',
                'slug' => 'google',
                'logo' => 'brands/google-logo.png',
                'website_url' => 'https://google.com',
                'description' => 'C√¥ng c·ª• t√¨m ki·∫øm v√† d·ªãch v·ª• internet',
                'status' => 'active',
                'order' => 2
            ],
            [
                'name' => 'Apple',
                'slug' => 'apple',
                'logo' => 'brands/apple-logo.png',
                'website_url' => 'https://apple.com',
                'description' => 'Thi·∫øt b·ªã ƒëi·ªán t·ª≠ v√† ph·∫ßn m·ªÅm cao c·∫•p',
                'status' => 'active',
                'order' => 3
            ]
        ];

        foreach ($brands as $brandData) {
            Brand::firstOrCreate(
                ['slug' => $brandData['slug']],
                $brandData
            );
        }

        $this->command->info('‚úÖ ƒê√£ t·∫°o ' . count($brands) . ' brands');
    }

    /**
     * T·∫°o FAQs m·∫´u
     */
    private function createFAQs()
    {
        $faqs = [
            [
                'question' => 'L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n?',
                'answer' => 'B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n b·∫±ng c√°ch click v√†o n√∫t "ƒêƒÉng k√Ω" ·ªü g√≥c ph·∫£i m√†n h√¨nh, sau ƒë√≥ ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin c√° nh√¢n v√† x√°c nh·∫≠n email.',
                'category' => 'T√†i kho·∫£n',
                'status' => 'active',
                'order' => 1
            ],
            [
                'question' => 'T√¥i qu√™n m·∫≠t kh·∫©u, ph·∫£i l√†m sao?',
                'answer' => 'B·∫°n c√≥ th·ªÉ reset m·∫≠t kh·∫©u b·∫±ng c√°ch click "Qu√™n m·∫≠t kh·∫©u" ·ªü trang ƒëƒÉng nh·∫≠p, nh·∫≠p email ƒë√£ ƒëƒÉng k√Ω v√† l√†m theo h∆∞·ªõng d·∫´n trong email.',
                'category' => 'T√†i kho·∫£n',
                'status' => 'active',
                'order' => 2
            ],
            [
                'question' => 'H·ªá th·ªëng c√≥ h·ªó tr·ª£ thanh to√°n online kh√¥ng?',
                'answer' => 'C√≥, ch√∫ng t√¥i h·ªó tr·ª£ nhi·ªÅu ph∆∞∆°ng th·ª©c thanh to√°n online nh∆∞ th·∫ª t√≠n d·ª•ng, v√≠ ƒëi·ªán t·ª≠, chuy·ªÉn kho·∫£n ng√¢n h√†ng.',
                'category' => 'Thanh to√°n',
                'status' => 'active',
                'order' => 3
            ],
            [
                'question' => 'L√†m sao ƒë·ªÉ li√™n h·ªá h·ªó tr·ª£ k·ªπ thu·∫≠t?',
                'answer' => 'B·∫°n c√≥ th·ªÉ li√™n h·ªá qua hotline, email ho·∫∑c chat tr·ª±c tuy·∫øn. ƒê·ªôi ng≈© h·ªó tr·ª£ l√†m vi·ªác 24/7.',
                'category' => 'H·ªó tr·ª£',
                'status' => 'active',
                'order' => 4
            ]
        ];

        foreach ($faqs as $faqData) {
            FAQ::firstOrCreate(
                ['question' => $faqData['question']],
                $faqData
            );
        }

        $this->command->info('‚úÖ ƒê√£ t·∫°o ' . count($faqs) . ' FAQs');
    }

    /**
     * T·∫°o statistics m·∫´u
     */
    private function createStatistics()
    {
        $statistics = [
            [
                'label' => 'Kh√°ch h√†ng h√†i l√≤ng',
                'value' => '1500',
                'icon' => 'fas fa-users',
                'description' => 'S·ªë l∆∞·ª£ng kh√°ch h√†ng tin t∆∞·ªüng v√† s·ª≠ d·ª•ng d·ªãch v·ª•',
                'animation_enabled' => true,
                'status' => 'active',
                'order' => 1
            ],
            [
                'label' => 'D·ª± √°n ho√†n th√†nh',
                'value' => '250',
                'icon' => 'fas fa-trophy',
                'description' => 'C√°c d·ª± √°n ƒë√£ tri·ªÉn khai th√†nh c√¥ng',
                'animation_enabled' => true,
                'status' => 'active',
                'order' => 2
            ],
            [
                'label' => 'NƒÉm kinh nghi·ªám',
                'value' => '10',
                'icon' => 'fas fa-clock',
                'description' => 'Kinh nghi·ªám trong lƒ©nh v·ª±c c√¥ng ngh·ªá',
                'animation_enabled' => true,
                'status' => 'active',
                'order' => 3
            ],
            [
                'label' => 'ƒê√°nh gi√° 5 sao',
                'value' => '98%',
                'icon' => 'fas fa-star',
                'description' => 'T·ª∑ l·ªá kh√°ch h√†ng ƒë√°nh gi√° 5 sao',
                'animation_enabled' => false,
                'status' => 'active',
                'order' => 4
            ]
        ];

        foreach ($statistics as $statisticData) {
            Statistic::firstOrCreate(
                ['label' => $statisticData['label']],
                $statisticData
            );
        }

        $this->command->info('‚úÖ ƒê√£ t·∫°o ' . count($statistics) . ' statistics');
    }

    /**
     * T·∫°o testimonials m·∫´u
     */
    private function createTestimonials()
    {
        $testimonials = [
            [
                'customer_name' => 'Nguy·ªÖn VƒÉn An',
                'review_text' => 'D·ªãch v·ª• r·∫•t chuy√™n nghi·ªáp v√† hi·ªáu qu·∫£. ƒê·ªôi ng≈© h·ªó tr·ª£ nhi·ªát t√¨nh, gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ nhanh ch√≥ng. T√¥i r·∫•t h√†i l√≤ng v·ªõi ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m.',
                'rating' => 5,
                'company' => 'C√¥ng ty ABC',
                'position' => 'Gi√°m ƒë·ªëc IT',
                'status' => 'active',
                'order' => 1
            ],
            [
                'customer_name' => 'Tr·∫ßn Th·ªã B√¨nh',
                'review_text' => 'S·∫£n ph·∫©m v∆∞·ª£t ngo√†i mong ƒë·ª£i c·ªßa t√¥i. Giao di·ªán th√¢n thi·ªán, d·ªÖ s·ª≠ d·ª•ng v√† t√≠nh nƒÉng ƒë·∫ßy ƒë·ªß. Ch·∫Øc ch·∫Øn s·∫Ω gi·ªõi thi·ªáu cho b·∫°n b√®.',
                'rating' => 5,
                'company' => 'Startup XYZ',
                'position' => 'CEO',
                'status' => 'active',
                'order' => 2
            ],
            [
                'customer_name' => 'L√™ Minh C∆∞·ªùng',
                'review_text' => 'H·ªó tr·ª£ kh√°ch h√†ng tuy·ªát v·ªùi, ph·∫£n h·ªìi nhanh v√† gi·∫£i quy·∫øt tri·ªát ƒë·ªÉ. Gi√° c·∫£ h·ª£p l√Ω so v·ªõi ch·∫•t l∆∞·ª£ng nh·∫≠n ƒë∆∞·ª£c.',
                'rating' => 4,
                'company' => 'Doanh nghi·ªáp DEF',
                'position' => 'Tr∆∞·ªüng ph√≤ng Marketing',
                'status' => 'active',
                'order' => 3
            ]
        ];

        foreach ($testimonials as $testimonialData) {
            Testimonial::firstOrCreate(
                ['customer_name' => $testimonialData['customer_name']],
                $testimonialData
            );
        }

        $this->command->info('‚úÖ ƒê√£ t·∫°o ' . count($testimonials) . ' testimonials');
    }

    /**
     * T·∫°o services m·∫´u
     */
    private function createServices()
    {
        $services = [
            [
                'name' => 'Ph√°t tri·ªÉn Website',
                'slug' => 'phat-trien-website',
                'icon' => 'fas fa-globe',
                'description' => 'Thi·∫øt k·∫ø v√† ph√°t tri·ªÉn website chuy√™n nghi·ªáp, responsive tr√™n m·ªçi thi·∫øt b·ªã v·ªõi c√¥ng ngh·ªá hi·ªán ƒë·∫°i.',
                'link' => '/dich-vu/phat-trien-website',
                'status' => 'active',
                'order' => 1
            ],
            [
                'name' => '·ª®ng d·ª•ng Mobile',
                'slug' => 'ung-dung-mobile',
                'icon' => 'fas fa-mobile-alt',
                'description' => 'Ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông iOS v√† Android v·ªõi tr·∫£i nghi·ªám ng∆∞·ªùi d√πng t·ªëi ∆∞u.',
                'link' => '/dich-vu/ung-dung-mobile',
                'status' => 'active',
                'order' => 2
            ],
            [
                'name' => 'T∆∞ v·∫•n C√¥ng ngh·ªá',
                'slug' => 'tu-van-cong-nghe',
                'icon' => 'fas fa-users',
                'description' => 'T∆∞ v·∫•n gi·∫£i ph√°p c√¥ng ngh·ªá ph√π h·ª£p v·ªõi nhu c·∫ßu v√† ng√¢n s√°ch c·ªßa doanh nghi·ªáp.',
                'link' => '/dich-vu/tu-van-cong-nghe',
                'status' => 'active',
                'order' => 3
            ]
        ];

        foreach ($services as $serviceData) {
            Service::firstOrCreate(
                ['slug' => $serviceData['slug']],
                $serviceData
            );
        }

        $this->command->info('‚úÖ ƒê√£ t·∫°o ' . count($services) . ' services');
    }

    /**
     * T·∫°o features m·∫´u
     */
    private function createFeatures()
    {
        $features = [
            [
                'name' => 'B·∫£o m·∫≠t cao',
                'slug' => 'bao-mat-cao',
                'icon' => 'fas fa-shield-alt',
                'description' => 'H·ªá th·ªëng b·∫£o m·∫≠t ƒëa l·ªõp v·ªõi m√£ h√≥a SSL v√† x√°c th·ª±c 2 y·∫øu t·ªë.',
                'status' => 'active',
                'order' => 1
            ],
            [
                'name' => 'Hi·ªáu su·∫•t t·ªëi ∆∞u',
                'slug' => 'hieu-suat-toi-uu',
                'icon' => 'fas fa-rocket',
                'description' => 'T·ªëi ∆∞u h√≥a t·ªëc ƒë·ªô t·∫£i trang v√† hi·ªáu su·∫•t h·ªá th·ªëng.',
                'status' => 'active',
                'order' => 2
            ],
            [
                'name' => 'Responsive Design',
                'slug' => 'responsive-design',
                'icon' => 'fas fa-mobile-alt',
                'description' => 'Giao di·ªán t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh tr√™n m·ªçi thi·∫øt b·ªã v√† k√≠ch th∆∞·ªõc m√†n h√¨nh.',
                'status' => 'active',
                'order' => 3
            ]
        ];

        foreach ($features as $featureData) {
            Feature::firstOrCreate(
                ['slug' => $featureData['slug']],
                $featureData
            );
        }

        $this->command->info('‚úÖ ƒê√£ t·∫°o ' . count($features) . ' features');
    }

    /**
     * T·∫°o partners m·∫´u
     */
    private function createPartners()
    {
        $partners = [
            [
                'name' => 'Vietcombank',
                'slug' => 'vietcombank',
                'logo' => 'partners/vietcombank-logo.png',
                'description' => 'Ng√¢n h√†ng th∆∞∆°ng m·∫°i c·ªï ph·∫ßn Ngo·∫°i th∆∞∆°ng Vi·ªát Nam',
                'website_url' => 'https://vietcombank.com.vn',
                'status' => 'active',
                'order' => 1
            ],
            [
                'name' => 'FPT Software',
                'slug' => 'fpt-software',
                'logo' => 'partners/fpt-logo.png',
                'description' => 'C√¥ng ty ph·∫ßn m·ªÅm h√†ng ƒë·∫ßu Vi·ªát Nam',
                'website_url' => 'https://fpt-software.com',
                'status' => 'active',
                'order' => 2
            ]
        ];

        foreach ($partners as $partnerData) {
            Partner::firstOrCreate(
                ['slug' => $partnerData['slug']],
                $partnerData
            );
        }

        $this->command->info('‚úÖ ƒê√£ t·∫°o ' . count($partners) . ' partners');
    }

    /**
     * T·∫°o schedules m·∫´u
     */
    private function createSchedules()
    {
        $schedules = [
            [
                'name' => 'L·ªãch l√†m vi·ªác m√πa h√® 2024',
                'slug' => 'lich-lam-viec-mua-he-2024',
                'image' => 'schedules/summer-schedule.jpg',
                'description' => 'L·ªãch l√†m vi·ªác ƒëi·ªÅu ch·ªânh cho m√πa h√® v·ªõi gi·ªù gi·∫•c linh ho·∫°t h∆°n.',
                'is_active' => true,
                'status' => 'active',
                'order' => 1
            ]
        ];

        foreach ($schedules as $scheduleData) {
            Schedule::firstOrCreate(
                ['slug' => $scheduleData['slug']],
                $scheduleData
            );
        }

        $this->command->info('‚úÖ ƒê√£ t·∫°o ' . count($schedules) . ' schedules');
    }

    /**
     * T·∫°o timelines m·∫´u
     */
    private function createTimelines()
    {
        $timelines = [
            [
                'title' => 'Th√†nh l·∫≠p c√¥ng ty',
                'start_date' => '2014-01-01',
                'end_date' => '2014-01-31',
                'image' => 'timelines/founding.jpg',
                'description' => 'C√¥ng ty ƒë∆∞·ª£c th√†nh l·∫≠p v·ªõi ƒë·ªôi ng≈© 5 ng∆∞·ªùi, b·∫Øt ƒë·∫ßu h√†nh tr√¨nh ph√°t tri·ªÉn.',
                'status' => 'active',
                'order' => 1
            ],
            [
                'title' => 'M·ªü r·ªông th·ªã tr∆∞·ªùng',
                'start_date' => '2018-06-01',
                'end_date' => '2018-12-31',
                'image' => 'timelines/expansion.jpg',
                'description' => 'M·ªü r·ªông ho·∫°t ƒë·ªông ra c√°c t·ªânh th√†nh, tƒÉng quy m√¥ ƒë·ªôi ng≈© l√™n 50 ng∆∞·ªùi.',
                'status' => 'active',
                'order' => 2
            ],
            [
                'title' => 'Chuy·ªÉn ƒë·ªïi s·ªë',
                'start_date' => '2020-01-01',
                'end_date' => null,
                'image' => 'timelines/digital-transformation.jpg',
                'description' => 'B·∫Øt ƒë·∫ßu qu√° tr√¨nh chuy·ªÉn ƒë·ªïi s·ªë to√†n di·ªán, √°p d·ª•ng c√¥ng ngh·ªá AI v√† Cloud.',
                'status' => 'active',
                'order' => 3
            ]
        ];

        foreach ($timelines as $timelineData) {
            Timeline::firstOrCreate(
                ['title' => $timelineData['title']],
                $timelineData
            );
        }

        $this->command->info('‚úÖ ƒê√£ t·∫°o ' . count($timelines) . ' timelines');
    }
}
